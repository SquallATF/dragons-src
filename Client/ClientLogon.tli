// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (fec3c836).
//
// ClientLogon.tli
//
// Wrapper implementations for Win32 type library .\ClientLogon.dll
// compiler-generated file created 07/07/13 at 14:45:22 - DO NOT EDIT!

#pragma once

//
// interface ILogIn wrapper method implementations
//

inline HRESULT ILogIn::LogIn ( unsigned int s, _bstr_t bstrParam, unsigned int * nRet, unsigned long dwTimeOut ) {
    HRESULT _hr = raw_LogIn(s, bstrParam, nRet, dwTimeOut);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ILogIn::PutParameters ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Parameters(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ILogIn::GetIP ( ) {
    BSTR _result;
    HRESULT _hr = get_IP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ILogIn::GetPort ( ) {
    long _result;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ILogIn::GetParameter ( ) {
    BSTR _result;
    HRESULT _hr = get_Parameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ILogIn::GetPID ( ) {
    BSTR _result;
    HRESULT _hr = get_PID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ILogIn::GetPayMethod ( ) {
    long _result;
    HRESULT _hr = get_PayMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ILogIn::GetGameCode ( ) {
    BSTR _result;
    HRESULT _hr = get_GameCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ILaunch wrapper method implementations
//

inline long ILaunch::Run ( _bstr_t bstrParam ) {
    long _result;
    HRESULT _hr = raw_Run(bstrParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ILaunch::Exe ( _bstr_t bstrParam ) {
    long _result;
    HRESULT _hr = raw_Exe(bstrParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
